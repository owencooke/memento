// This file is auto-generated by @hey-api/openapi-ts

import { type Options, healthCheckApiGet, userInfoApiUserIdGet, createMementoRouteApiMementoPost } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { HealthCheckApiGetData, UserInfoApiUserIdGetData, CreateMementoRouteApiMementoPostData, CreateMementoRouteApiMementoPostError, CreateMementoRouteApiMementoPostResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const healthCheckApiGetQueryKey = (options?: Options<HealthCheckApiGetData>) => createQueryKey('healthCheckApiGet', options);

export const healthCheckApiGetOptions = (options?: Options<HealthCheckApiGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckApiGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckApiGetQueryKey(options)
    });
};

export const userInfoApiUserIdGetQueryKey = (options: Options<UserInfoApiUserIdGetData>) => createQueryKey('userInfoApiUserIdGet', options);

export const userInfoApiUserIdGetOptions = (options: Options<UserInfoApiUserIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await userInfoApiUserIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userInfoApiUserIdGetQueryKey(options)
    });
};

export const createMementoRouteApiMementoPostQueryKey = (options: Options<CreateMementoRouteApiMementoPostData>) => createQueryKey('createMementoRouteApiMementoPost', options);

export const createMementoRouteApiMementoPostOptions = (options: Options<CreateMementoRouteApiMementoPostData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createMementoRouteApiMementoPost({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createMementoRouteApiMementoPostQueryKey(options)
    });
};

export const createMementoRouteApiMementoPostMutation = (options?: Partial<Options<CreateMementoRouteApiMementoPostData>>) => {
    const mutationOptions: UseMutationOptions<CreateMementoRouteApiMementoPostResponse, CreateMementoRouteApiMementoPostError, Options<CreateMementoRouteApiMementoPostData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createMementoRouteApiMementoPost({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};